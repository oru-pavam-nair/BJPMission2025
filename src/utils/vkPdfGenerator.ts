import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { VKDataRow, VKFilterState } from '../types/vkDashboard';
import { getVKFilterOptions, getVKFilterCounts, getVKFilteredDataCount } from './vkDataProcessor';

// Extend jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

interface VKReportData {
  allData: VKDataRow[];
  filters: VKFilterState;
  level: 'zone' | 'district' | 'assembly' | 'orgMandal' | 'panchayat';
  selectedValue: string;
}

// Function to generate PDF as blob for ZIP creation
export const generateVKReportPDFAsBlob = async (reportData: VKReportData): Promise<Blob | null> => {
  try {
    console.log('🔄 Starting VK PDF generation as blob...', reportData);

    const doc = new jsPDF('landscape');
    const { allData, filters, level, selectedValue } = reportData;

    // Header
    doc.setFontSize(20);
    doc.setTextColor(249, 115, 22);
    doc.text('BJP Kerala - Mission 2025-2026', 20, 20);

    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Vikasita Keralam Ward Team Report', 20, 35);

    // Report Level Information
    doc.setFontSize(14);
    doc.setTextColor(60, 60, 60);

    const levelTitles = {
      zone: 'സോൺ റിപ്പോർട്ത്',
      district: 'സംഘടന ജില്ല റിപ്പോർട്ത്',
      assembly: 'നിയോജക മണ്ഡലം റിപ്പോർട്ത്',
      orgMandal: 'സംഘടനാ മണ്ഡലം റിപ്പോർട്ത്',
      panchayat: 'പഞ്ചായത്ത്/മുനിസിപ്പാലിറ്റി/കോർപ്പറേഷൻ റിപ്പോർട്ത്'
    };

    let yPosition = 50;
    doc.text(`Report Type: ${levelTitles[level]}`, 20, yPosition);
    yPosition += 7;

    if (filters.district) {
      doc.text(`District: ${filters.district}`, 20, yPosition);
      yPosition += 7;
    }

    yPosition += 10;
    doc.text(`Report Generated: ${new Date().toLocaleDateString('en-IN')} at ${new Date().toLocaleTimeString('en-IN')}`, 20, yPosition);

    // Main Data Table
    yPosition += 15;

    const getCurrentLevelData = () => {
      const nextLevel = getNextFilterLevel(level);
      if (!nextLevel) return [];

      const nextOptions = getVKFilterOptions(allData, filters);
      const nextLevelOptions = getOptionsForLevel(nextOptions, nextLevel);

      return nextLevelOptions.map(option => {
        const tempFilters = { ...filters, [nextLevel]: option };
        const count = getVKFilterCounts(allData, tempFilters)[nextLevel];
        return { option, count };
      });
    };

    const tableData = getCurrentLevelData();
    const totalCount = getVKFilteredDataCount(allData, filters);

    if (tableData.length > 0) {
      const nextLevel = getNextFilterLevel(level);
      const nextLevelTitle = getLevelTitle(nextLevel);

      doc.setFontSize(14);
      doc.setTextColor(249, 115, 22);
      doc.text(`${nextLevelTitle} List`, 20, yPosition);

      const pdfTableData = tableData.map((item, index) => [
        index + 1,
        item.option,
        item.count.toLocaleString(),
        `${((item.count / totalCount) * 100).toFixed(1)}%`
      ]);

      doc.autoTable({
        startY: yPosition + 10,
        head: [['#', nextLevelTitle, 'Count', 'Percentage']],
        body: pdfTableData,
        theme: 'grid',
        headStyles: {
          fillColor: [249, 115, 22],
          textColor: [255, 255, 255],
          fontSize: 10,
          fontStyle: 'bold'
        },
        bodyStyles: {
          fontSize: 9,
          textColor: [60, 60, 60],
          cellPadding: 4
        },
        alternateRowStyles: {
          fillColor: [248, 250, 252]
        },
        columnStyles: {
          0: { cellWidth: 15 },
          1: { cellWidth: 80 },
          2: { cellWidth: 30 },
          3: { cellWidth: 25 }
        },
        margin: { left: 20, right: 20 }
      });
    }

    // Footer
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150, 150, 150);
      doc.text(
        `Page ${i} of ${pageCount} | Generated by BJP Kerala VK Dashboard | Confidential Document`,
        20,
        doc.internal.pageSize.height - 10
      );

      doc.setTextColor(249, 115, 22);
      doc.text('BJP Kerala - Mission 2025-2026', doc.internal.pageSize.width - 80, doc.internal.pageSize.height - 10);
    }

    // Return as blob
    const pdfBlob = doc.output('blob');
    console.log('✅ VK PDF blob generated successfully');
    return pdfBlob;

  } catch (error) {
    console.error('❌ Error generating VK PDF blob:', error);
    return null;
  }
};

export const generateVKReportPDF = (reportData: VKReportData) => {
  try {
    console.log('🔄 Starting VK PDF generation...', reportData);

    const doc = new jsPDF('landscape');
    const { allData, filters, level, selectedValue } = reportData;

    // Header
    doc.setFontSize(20);
    doc.setTextColor(249, 115, 22);
    doc.text('BJP Kerala - Mission 2025-2026', 20, 20);

    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Vikasita Keralam Ward Team Report', 20, 35);

    // Report Level Information
    doc.setFontSize(14);
    doc.setTextColor(60, 60, 60);

    const levelTitles = {
      zone: 'സോൺ റിപ്പോർട്ട്',
      district: 'സംഘടന ജില്ല റിപ്പോർട്ട്',
      assembly: 'നിയോജക മണ്ഡലം റിപ്പോർട്ത്',
      orgMandal: 'സംഘടനാ മണ്ഡലം റിപ്പോർട്ത്',
      panchayat: 'പഞ്ചായത്ത്/മുനിസിപ്പാലിറ്റി/കോർപ്പറേഷൻ റിപ്പോർട്ത്'
    };

    let yPosition = 50;
    doc.text(`Report Type: ${levelTitles[level]}`, 20, yPosition);
    yPosition += 7;

    if (selectedValue) {
      doc.text(`Selected: ${selectedValue}`, 20, yPosition);
      yPosition += 7;
    }

    yPosition += 10;
    doc.text(`Report Generated: ${new Date().toLocaleDateString('en-IN')} at ${new Date().toLocaleTimeString('en-IN')}`, 20, yPosition);

    // Main Data Table - Only show current level table
    yPosition += 15;

    // Get the current level data for the table (what user sees on screen)
    const getCurrentLevelData = () => {
      const nextLevel = getNextFilterLevel(level);
      if (!nextLevel) return [];

      const nextOptions = getVKFilterOptions(allData, filters);
      const nextLevelOptions = getOptionsForLevel(nextOptions, nextLevel);

      return nextLevelOptions.map(option => {
        const tempFilters = { ...filters, [nextLevel]: option };
        const count = getVKFilterCounts(allData, tempFilters)[nextLevel];
        return { option, count };
      });
    };

    const tableData = getCurrentLevelData();
    const totalCount = getVKFilteredDataCount(allData, filters);

    if (tableData.length > 0) {
      const nextLevel = getNextFilterLevel(level);
      const nextLevelTitle = getLevelTitle(nextLevel);

      doc.setFontSize(14);
      doc.setTextColor(249, 115, 22);
      doc.text(`${nextLevelTitle} List`, 20, yPosition);

      // Prepare table data
      const pdfTableData = tableData.map((item, index) => [
        index + 1,
        item.option,
        item.count.toLocaleString(),
        `${((item.count / totalCount) * 100).toFixed(1)}%`
      ]);

      // Create table with enhanced Malayalam support
      doc.autoTable({
        startY: yPosition + 10,
        head: [['#', nextLevelTitle, 'Count', 'Percentage']],
        body: pdfTableData,
        theme: 'grid',
        headStyles: {
          fillColor: [249, 115, 22],
          textColor: [255, 255, 255],
          fontSize: 10,
          fontStyle: 'bold'
        },
        bodyStyles: {
          fontSize: 9,
          textColor: [60, 60, 60],
          // Enhanced cell padding for better text display
          cellPadding: 4
        },
        alternateRowStyles: {
          fillColor: [248, 250, 252]
        },
        columnStyles: {
          0: { cellWidth: 15 },  // #
          1: { cellWidth: 80 },  // Name - wider for Malayalam text
          2: { cellWidth: 30 },  // Count
          3: { cellWidth: 25 }   // Percentage
        },
        margin: { left: 20, right: 20 },
        // Enhanced text handling for Malayalam
        styles: {
          overflow: 'linebreak',
          cellWidth: 'wrap',
          halign: 'left',
          valign: 'middle',
          lineColor: [200, 200, 200],
          lineWidth: 0.1
        },
        // Custom cell rendering for better Malayalam text display
        didParseCell: function (data: any) {
          if (data.cell.text && Array.isArray(data.cell.text)) {
            data.cell.text = data.cell.text.map((text: string) => {
              // Clean text for better rendering
              return text.replace(/[\u200B-\u200D\uFEFF]/g, '').trim();
            });
          }
        }
      });
    } else {
      doc.setFontSize(12);
      doc.setTextColor(220, 38, 38);
      doc.text('No detailed data available for this level.', 20, yPosition + 10);
    }

    // Add current selection path
    const selectionPath = [];
    if (filters.tab) selectionPath.push(`Zone: ${filters.tab}`);
    if (filters.district) selectionPath.push(`District: ${filters.district}`);
    if (filters.assemblyMandal) selectionPath.push(`Assembly: ${filters.assemblyMandal}`);
    if (filters.orgMandal) selectionPath.push(`Org Mandal: ${filters.orgMandal}`);
    if (filters.panchayat) selectionPath.push(`Panchayat: ${filters.panchayat}`);

    if (selectionPath.length > 0) {
      const finalY = (doc as any).lastAutoTable?.finalY || yPosition + 50;

      doc.setFontSize(12);
      doc.setTextColor(249, 115, 22);
      doc.text('Current Selection Path', 20, finalY + 20);

      doc.setFontSize(10);
      doc.setTextColor(0, 0, 0);

      let pathY = finalY + 30;
      selectionPath.forEach((path, index) => {
        const indent = index * 10;
        doc.text(`${' '.repeat(indent)}→ ${path}`, 25 + indent, pathY);
        pathY += 6;
      });
    }

    // Footer on all pages
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150, 150, 150);
      doc.text(
        `Page ${i} of ${pageCount} | Generated by BJP Kerala VK Dashboard | Confidential Document`,
        20,
        doc.internal.pageSize.height - 10
      );

      // Add BJP logo text in footer
      doc.setTextColor(249, 115, 22);
      doc.text('BJP Kerala - Mission 2025-2026', doc.internal.pageSize.width - 80, doc.internal.pageSize.height - 10);
    }

    // Generate filename using district name (matches "ജില്ല:" in PDF)
    let filename = 'VK_Report';
    if (filters.district) {
      filename += `_${filters.district.replace(/\s+/g, '_').replace(/[<>:"/\\|?*]/g, '_')}`;
    }
    filename += `_${level}_${new Date().toISOString().split('T')[0]}.pdf`;

    console.log('💾 Saving PDF with filename:', filename);
    doc.save(filename);

    console.log('✅ VK PDF generated successfully:', filename);
    return true;

  } catch (error) {
    console.error('❌ Error generating VK PDF:', error);
    alert(`❌ Error generating PDF report: ${error instanceof Error ? error.message : 'Unknown error'}`);
    return false;
  }
};

// Helper functions
const getNextFilterLevel = (currentLevel: string): keyof VKFilterState | null => {
  switch (currentLevel) {
    case 'zone': return 'district';
    case 'district': return 'assemblyMandal';
    case 'assembly': return 'orgMandal';
    case 'orgMandal': return 'panchayat';
    case 'panchayat': return null;
    default: return 'tab';
  }
};

const getOptionsForLevel = (options: any, level: keyof VKFilterState): string[] => {
  switch (level) {
    case 'tab': return options.tabs;
    case 'district': return options.districts;
    case 'assemblyMandal': return options.assemblyMandals;
    case 'orgMandal': return options.orgMandals;
    case 'panchayat': return options.panchayats;
    default: return [];
  }
};

const getLevelTitle = (level: keyof VKFilterState | null): string => {
  switch (level) {
    case 'tab': return 'Zones';
    case 'district': return 'Districts';
    case 'assemblyMandal': return 'Org Mandals';
    case 'orgMandal': return 'Org Mandals';
    case 'panchayat': return 'Panchayats';
    default: return 'Items';
  }
};

// CSV Export function
export const generateVKReportCSV = (reportData: VKReportData) => {
  try {
    console.log('🔄 Starting VK CSV generation...', reportData);

    const { allData, filters, level, selectedValue } = reportData;

    // Get the current level data for the CSV (what user sees on screen)
    const getCurrentLevelData = () => {
      const nextLevel = getNextFilterLevel(level);
      if (!nextLevel) return [];

      const nextOptions = getVKFilterOptions(allData, filters);
      const nextLevelOptions = getOptionsForLevel(nextOptions, nextLevel);

      return nextLevelOptions.map(option => {
        const tempFilters = { ...filters, [nextLevel]: option };
        const count = getVKFilterCounts(allData, tempFilters)[nextLevel];
        return { option, count };
      });
    };

    const csvData = getCurrentLevelData();
    const totalCount = getVKFilteredDataCount(allData, filters);

    // Create CSV headers
    const nextLevel = getNextFilterLevel(level);
    const nextLevelTitle = getLevelTitle(nextLevel);

    const headers = [
      'Serial No',
      nextLevelTitle,
      'Count',
      'Percentage',
      'Current Zone',
      'Current District',
      'Current Assembly Mandal',
      'Current Org Mandal',
      'Current Panchayat'
    ];

    // Create CSV rows
    const csvRows = csvData.map((item, index) => [
      (index + 1).toString(),
      `"${item.option.replace(/"/g, '""')}"`,
      item.count.toString(),
      `${((item.count / totalCount) * 100).toFixed(1)}%`,
      `"${(filters.tab || '').replace(/"/g, '""')}"`,
      `"${(filters.district || '').replace(/"/g, '""')}"`,
      `"${(filters.assemblyMandal || '').replace(/"/g, '""')}"`,
      `"${(filters.orgMandal || '').replace(/"/g, '""')}"`,
      `"${(filters.panchayat || '').replace(/"/g, '""')}"`
    ].join(','));

    const csvContent = [headers.join(','), ...csvRows].join('\n');

    // Create and download CSV file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);

    let filename = 'VK_Data';
    if (filters.district) {
      filename += `_${filters.district.replace(/\s+/g, '_').replace(/[<>:"/\\|?*]/g, '_')}`;
    }
    filename += `_${level}_${new Date().toISOString().split('T')[0]}.csv`;

    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Clean up
    URL.revokeObjectURL(url);

    console.log('✅ VK CSV generated successfully:', filename);
    return true;

  } catch (error) {
    console.error('❌ Error generating VK CSV:', error);
    alert(`❌ Error generating CSV file: ${error instanceof Error ? error.message : 'Unknown error'}`);
    return false;
  }
};